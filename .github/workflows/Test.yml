name: Build and Release GKI Kernels

permissions:
  contents: write
  actions: write
  
on:
  workflow_dispatch:
    inputs:
      make_release:
        description: 'Do you want to create a release?'
        required: true
        type: boolean
        default: false
      runner:
        description: "Choose runner"
        required: true
        type: choice
        options:
          - ubuntu-22.04
          - ubuntu-22.04-local
        default: ubuntu-22.04
      lto_type:
        description: "Choose LTO type (full will not run on basic runners)"
        required: true
        type: choice
        options:
          - full
          - thin
          - none
        default: thin
      kernelsu_variant:
        description: "Choose KernelSU"
        required: true
        type: choice
        options:
          - Official
          - Next
          - MKSU
        default: Next
      kernelsu_branch:
        description: "Choose ksu branch"
        required: true
        type: choice
        options:
          - Stable
          - Dev
          - Other
        default: Stable
      kernelsu_branch_other:
        description: "If 'Other' is selected, specify your custom branch"
        required: false
        type: string
        default: ""

jobs:
  build-kernel-a14-6-1:
    runs-on: ${{ inputs.runner }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up build environment
        run: |
          sudo apt-get update -y
          sudo apt-get install -y git ccache bc build-essential libncurses-dev flex bison libssl-dev libelf-dev

      - name: Configure build
        run: |
          # Your kernel configuration steps here
          echo "Configuring kernel build with LTO=${{ inputs.lto_type }}"
          # Example: make defconfig
          # Modify config for LTO type

      - name: Build kernel
        run: |
          # Your actual build command
          echo "Building kernel with KernelSU=${{ inputs.kernelsu_variant }}"
          # Example: make -j$(nproc)

      - name: Package artifacts
        run: |
          mkdir -p artifacts
          # Package your built kernel files
          echo "Packaging kernel images and modules..."
          # Example: cp arch/arm64/boot/Image.gz artifacts/

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kernel-build-${{ github.run_id }}
          path: artifacts
          retention-days: 1

  trigger-release:
    runs-on: ubuntu-latest
    needs: build-kernel-a14-6-1
    if: ${{ inputs.make_release && needs.build-kernel-a14-6-1.result == 'success' }}
    env:
      REPO_OWNER: Kavi
      REPO_NAME: GKI-Kernelsu-susfs
      RELEASE_NAME: "GKI Kernel with KernelSU ${{ inputs.kernelsu_variant }} & SUSFS v1.5.5"
      RELEASE_NOTES: |
        This release contains:
        - KernelSU ${{ inputs.kernelsu_variant }}
        - SUSFS v1.5.5
        - Wireguard Support
        - Maphide Patches
        - Magic Mount Support
        
        Module: https://github.com/sidex15/ksu_module_susfs
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate Release Tag
        run: |
          DATE=$(date +'%Y%m%d-%H%M')
          echo "NEW_TAG=release-$DATE-${{ inputs.kernelsu_variant }}-${{ inputs.lto_type }}" >> $GITHUB_ENV
          echo "Generated tag: $NEW_TAG"

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: kernel-build-${{ github.run_id }}
          path: artifacts

      - name: Verify artifacts
        run: |
          echo "Artifacts directory contents:"
          ls -R artifacts
          if [ ! -d "artifacts" ] || [ -z "$(ls -A artifacts)" ]; then
            echo "Error: No artifacts found!"
            exit 1
          fi

      - name: Determine KernelSU branch
        run: |
          if [[ "${{ inputs.kernelsu_branch }}" == "Stable" ]]; then
            BRANCH="Stable"
          elif [[ "${{ inputs.kernelsu_branch }}" == "Dev" ]]; then
            BRANCH="next"
          elif [[ "${{ inputs.kernelsu_branch }}" == "Other" && -n "${{ inputs.kernelsu_branch_other }}" ]]; then
            BRANCH="${{ inputs.kernelsu_branch_other }}"
          else
            echo "Error: Invalid branch selection" >&2
            exit 1
          fi
          echo "KSU_BRANCH=$BRANCH" >> $GITHUB_ENV

      - name: Get KernelSU reference
        run: |
          if [ "${{ inputs.kernelsu_variant }}" == "Official" ]; then
            REPO_URL="https://github.com/tiann/KernelSU.git"
            REPO_URL2="tiann/KernelSU"
          elif [ "${{ inputs.kernelsu_variant }}" == "Next" ]; then
            REPO_URL="https://github.com/rifsxd/KernelSU-Next.git"
            REPO_URL2="rifsxd/KernelSU-Next"
          elif [ "${{ inputs.kernelsu_variant }}" == "MKSU" ]; then
            REPO_URL="https://github.com/5ec1cff/KernelSU.git"
            REPO_URL2="5ec1cff/KernelSU"
          else
            echo "Unknown KernelSU variant"
            exit 1
          fi
          
          BRANCH="${{ env.KSU_BRANCH }}"
          
          if [[ "$BRANCH" == "Stable" ]]; then
            TAG=$(git ls-remote --tags --sort=-v:refname $REPO_URL | grep -o 'refs/tags/.*' | cut -d'/' -f3 | head -n1)
            if [[ -z "$TAG" ]]; then
              echo "Error: Could not fetch latest tag" >&2
              exit 1
            fi
            KSU_REF=$TAG
            KSU_URL="https://github.com/$REPO_URL2/releases/tag/$TAG"
          elif [[ "$BRANCH" == "Dev" || "$BRANCH" == "next" ]]; then
            COMMIT_HASH=$(git ls-remote $REPO_URL refs/heads/$BRANCH | awk '{ print $1 }')
            if [[ -z "$COMMIT_HASH" ]]; then
              echo "Error: Could not fetch latest commit" >&2
              exit 1
            fi
            KSU_REF=$COMMIT_HASH
            KSU_URL="https://github.com/$REPO_URL2/commit/$COMMIT_HASH"
          else
            if git ls-remote --tags $REPO_URL | grep -q "refs/tags/$BRANCH"; then
              KSU_REF=$BRANCH
              KSU_URL="https://github.com/$REPO_URL2/releases/tag/$BRANCH"
            else
              echo "Error: Specified tag '$BRANCH' not found" >&2
              exit 1
            fi
          fi

          echo "KSU_REF=$KSU_REF" >> $GITHUB_ENV
          echo "KSU_URL=$KSU_URL" >> $GITHUB_ENV

      - name: Get SUSFS commit info
        run: |
          GITLAB_OWNER="simonpunk"
          GITLAB_REPO="susfs4ksu"
          BRANCH="gki-android14-6.1"
          
          COMMIT_HASH=$(git ls-remote https://gitlab.com/$GITLAB_OWNER/$GITLAB_REPO.git refs/heads/$BRANCH | awk '{ print $1 }')
          if [[ -n "$COMMIT_HASH" ]]; then
            COMMIT_URL="https://gitlab.com/$GITLAB_OWNER/$GITLAB_REPO/-/commit/$COMMIT_HASH"
            echo "COMMIT_HASH_SUSFS=$COMMIT_HASH" >> $GITHUB_ENV
            echo "COMMIT_URL_SUSFS=$COMMIT_URL" >> $GITHUB_ENV
          else
            echo "Error: Could not fetch SUSFS commit" >&2
            exit 1
          fi

      - name: Prepare release notes
        run: |
          NOTES="This release contains:
          - KernelSU ${{ inputs.kernelsu_variant }}
          - SUSFS v1.5.5
          - Wireguard Support
          - Maphide Patches
          - Magic Mount Support
          
          Module: https://github.com/sidex15/ksu_module_susfs
          
          Build Details:
          - LTO: ${{ inputs.lto_type }}
          - Runner: ${{ inputs.runner }}
          
          Component Versions:
          - KernelSU ${{ inputs.kernelsu_variant }} (${{ inputs.kernelsu_branch }}): [${{ env.KSU_REF }}](${{ env.KSU_URL }})
          - SUSFS: [${{ env.COMMIT_HASH_SUSFS }}](${{ env.COMMIT_URL_SUSFS }})
          "

          if [ "${{ inputs.kernelsu_variant }}" == "Official" ]; then
            NOTES+="\nManager: https://github.com/tiann/KernelSU"
          elif [ "${{ inputs.kernelsu_variant }}" == "Next" ]; then
            NOTES+="\nManager: https://github.com/rifsxd/KernelSU-Next"
          elif [ "${{ inputs.kernelsu_variant }}" == "MKSU" ]; then
            NOTES+="\nManager: https://github.com/5ec1cff/KernelSU"
          fi

          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "$NOTES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.NEW_TAG }}
          name: ${{ env.RELEASE_NAME }}
          body: ${{ env.RELEASE_NOTES }}
          prerelease: true
          files: |
            artifacts/**/*
          fail_on_unmatched_files: true

      - name: Verify release
        run: |
          gh release view ${{ env.NEW_TAG }} --json name,tagName,url,assets
