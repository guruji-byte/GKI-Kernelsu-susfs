name: Build and Release GKI Kernels

permissions:
  contents: write  # Allow writing to repository contents (for pushing tags)
  actions: write   # Allows triggering actions
  
on:
  workflow_dispatch:
    inputs:
      make_release:
        description: 'Do you want to create a release?'
        required: true
        type: boolean
        default: false
      runner:
        description: "Choose runner"
        required: true
        type: choice
        options:
          - ubuntu-22.04
          - ubuntu-22.04-local
        default: ubuntu-22.04
      lto_type:
        description: "Choose LTO type (full will not run on basic runners)"
        required: true
        type: choice
        options:
          - full
          - thin
          - none
        default: thin
      kernelsu_variant:
        description: "Choose KernelSU"
        required: true
        type: choice
        options:
          - Official
          - Next
          - MKSU
        default: Next
      kernelsu_branch:
        description: "Choose ksu branch"
        required: true
        type: choice
        options:
          - Stable
          - Dev
          - Other
        default: Stable
      kernelsu_branch_other:
        description: "If 'Other' is selected, specify your custom branch"
        required: false
        type: string
        default: ""

jobs:
trigger-release:
    runs-on: ubuntu-latest
    needs: build-kernel-a14-6-1
    if: ${{ inputs.make_release && needs.build-kernel-a14-6-1.result == 'success' }}
    env:
      REPO_OWNER: Kavi
      REPO_NAME: GKI-Kernelsu-susfs
      RELEASE_NAME: "GKI Kernel with KernelSU ${{ inputs.kernelsu_variant }} & SUSFS v1.5.5"
      RELEASE_NOTES: |
        This release contains:
        - KernelSU ${{ inputs.kernelsu_variant }}
        - SUSFS v1.5.5
        - Wireguard Support
        - Maphide Patches
        - Magic Mount Support
        
        Module: https://github.com/sidex15/ksu_module_susfs
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Generate Release Tag
        run: |
          DATE=$(date +'%Y%m%d-%H%M')
          echo "NEW_TAG=release-$DATE-${{ inputs.kernelsu_variant }}-${{ inputs.lto_type }}" >> $GITHUB_ENV
          echo "Generated tag: $NEW_TAG"

      - name: Verify build artifacts exist
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: List artifacts
        run: ls -R artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.NEW_TAG }}
          name: ${{ env.RELEASE_NAME }}
          body: ${{ env.RELEASE_NOTES }}
          prerelease: true
          files: |
            artifacts/**/*
          fail_on_unmatched_files: true

      - name: Show release info
        run: |
          gh release view ${{ env.NEW_TAG }} --json name,tagName,url,assets

      - name: Determine the branch for KernelSU-${{ inputs.kernelsu_variant }}
        run: |
          # Determine the branch based on user input
          if [[ "${{ inputs.kernelsu_branch }}" == "Stable" ]]; then
            BRANCH="Stable"
          elif [[ "${{ inputs.kernelsu_branch }}" == "Dev" ]]; then
            BRANCH="next"
          elif [[ "${{ inputs.kernelsu_branch }}" == "Other" && -n "${{ inputs.kernelsu_branch_other }}" ]]; then
            BRANCH="${{ inputs.kernelsu_branch_other }}"
          else
            echo "Error: Custom branch not provided for 'Other'" >&2
            exit 1
          fi

          # Store the selected branch in GITHUB_ENV
          echo "KSU_BRANCH=$BRANCH" >> $GITHUB_ENV

      - name: Get commit hash or tag and generate URL for KernelSU-${{ inputs.kernelsu_variant }}
        run: |
          if [ "${{ inputs.kernelsu_variant }}" == "Official" ]; then
            echo "This is the Official variant"
            REPO_URL="https://github.com/tiann/KernelSU.git"
            REPO_URL2="tiann/KernelSU"
          elif [ "${{ inputs.kernelsu_variant }}" == "Next" ]; then
            echo "This is the Next variant"
            REPO_URL="https://github.com/rifsxd/KernelSU-Next.git"
            REPO_URL2="rifsxd/KernelSU-Next"
          elif [ "${{ inputs.kernelsu_variant }}" == "MKSU" ]; then
            echo "This is the MKSU variant"
            REPO_URL="https://github.com/5ec1cff/KernelSU.git"
            REPO_URL2="5ec1cff/KernelSU"
          else
            echo "Unknown variant"
          fi
          
          BRANCH="${{ env.KSU_BRANCH }}"
          
          if [[ "$BRANCH" == "Stable" ]]; then
            # Fetch the latest tag
            TAG=$(git ls-remote --tags --sort=-v:refname $REPO_URL | grep -o 'refs/tags/.*' | cut -d'/' -f3 | head -n1)
            if [[ -z "$TAG" ]]; then
              echo "Error: Could not fetch latest tag for KernelSU" >&2
              exit 1
            fi
            KSU_REF=$TAG
            KSU_URL="https://github.com/$REPO_URL2/releases/tag/$TAG"

          elif [[ "$BRANCH" == "Dev" ]]; then
            # Fetch the latest commit from "next" branch
            COMMIT_HASH=$(git ls-remote $REPO_URL refs/heads/$BRANCH | awk '{ print $1 }')
            if [[ -z "$COMMIT_HASH" ]]; then
              echo "Error: Could not fetch latest commit for KernelSU-Next Dev" >&2
              exit 1
            fi
            KSU_REF=$COMMIT_HASH
            KSU_URL="https://github.com/$REPO_URL2/commit/$COMMIT_HASH"

          else
            # Fetch the specific tag for the custom branch
            TAG=$BRANCH
            if git ls-remote --tags $REPO_URL | grep -q "refs/tags/$TAG"; then
              KSU_REF=$TAG
              KSU_URL="https://github.com/$REPO_URL2/releases/tag/$TAG"
            else
              echo "Error: Specified tag '$TAG' not found in KernelSU-Next" >&2
              exit 1
            fi
          fi

          # Echo the values to GitHub environment for later use
          echo "KSU_REF=$KSU_REF" >> $GITHUB_ENV
          echo "KSU_URL=$KSU_URL" >> $GITHUB_ENV
          echo "KernelSU Reference: $KSU_REF"
          echo "KernelSU URL: $KSU_URL"

      - name: Get commit hashes and generate commit URLs
        run: |
          GITLAB_OWNER="simonpunk"
          GITLAB_REPO="susfs4ksu"

          declare -A BRANCH_MAP=(
            ["gki_android14_6_1"]="gki-android14-6.1"
          )

          for var_name in "${!BRANCH_MAP[@]}"; do
            branch_name="${BRANCH_MAP[$var_name]}"
            COMMIT_HASH=$(git ls-remote https://gitlab.com/$GITLAB_OWNER/$GITLAB_REPO.git refs/heads/$branch_name | awk '{ print $1 }')

            if [[ -n "$COMMIT_HASH" ]]; then
              COMMIT_URL="https://gitlab.com/$GITLAB_OWNER/$GITLAB_REPO/-/commit/$COMMIT_HASH"
              echo "$branch_name Commit: $COMMIT_HASH"
              echo "$branch_name Commit URL: $COMMIT_URL"

              # Store commit hash and commit URL in GitHub environment
              echo "COMMIT_HASH_${var_name}=$COMMIT_HASH" >> "$GITHUB_ENV"
              echo "COMMIT_URL_${var_name}=$COMMIT_URL" >> "$GITHUB_ENV"
            fi
          done

      - name: Append Commit Hashes & Links to `RELEASE_NOTES` & Append KernelSU-Next Reference to `RELEASE_NOTES`
        run: |
          if [ "${{ inputs.kernelsu_variant }}" == "Official" ]; then
            echo "This is the Official variant"
            echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
            echo "$RELEASE_NOTES" >> $GITHUB_ENV
            echo "Official Manager:" >> $GITHUB_ENV
            echo "-> https://github.com/tiann/KernelSU" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          elif [ "${{ inputs.kernelsu_variant }}" == "Next" ]; then
            echo "This is the Next variant"
            echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
            echo "$RELEASE_NOTES" >> $GITHUB_ENV
            echo "Next Manager:" >> $GITHUB_ENV
            echo "-> https://github.com/rifsxd/KernelSU-Next" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          elif [ "${{ inputs.kernelsu_variant }}" == "MKSU" ]; then
            echo "This is the MKSU variant"
            echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
            echo "$RELEASE_NOTES" >> $GITHUB_ENV
            echo "MKSU Manager:" >> $GITHUB_ENV
            echo "-> https://github.com/5ec1cff/KernelSU" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          else
            echo "Unknown variant"
          fi
          
      - name: Append Commit Hashes & Links to `RELEASE_NOTES` & Append KernelSU-Next Reference to `RELEASE_NOTES`
        run: |
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "$RELEASE_NOTES" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "LTO: ${{ inputs.lto_type }}" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "Commit Hashes & Links:" >> $GITHUB_ENV
          echo "KernelSU:" >> $GITHUB_ENV
          echo "${{ inputs.kernelsu_variant }}-${{ inputs.kernelsu_branch }}: [$KSU_REF]($KSU_URL)" >> $GITHUB_ENV
          echo "SUSFS4KSU:" >> $GITHUB_ENV
          echo "gki-android14-6.1: [$COMMIT_HASH_gki_android14_6_1]($COMMIT_URL_gki_android14_6_1)" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
       
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./downloaded-artifacts

      - name: List Downloaded Artifacts
        run: ls -R ./downloaded-artifacts

      # Create GitHub Release and upload files
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.NEW_TAG }}
          prerelease: true
          release_name: ${{ env.RELEASE_NAME }}
          body: ${{ env.RELEASE_NOTES }}

      - name: Upload Release Assets Dynamically
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Install GitHub CLI if not present
          if ! command -v gh &> /dev/null; then
            sudo apt-get install -y gh
          fi
          
          # Loop through all files in the downloaded-artifacts directory
          for file in ./downloaded-artifacts/*/*; do
              if [ -f "$file" ]; then
                  echo "Uploading $file..."
                  gh release upload ${{ env.NEW_TAG }} "$file" || echo "Failed to upload $file"
              fi
          done

      # Display Files Uploaded
      - name: Display Files Uploaded
        run: |
          echo "GitHub release created with tag: ${{ env.NEW_TAG }}"
          echo "Files uploaded:"
          gh release view ${{ env.NEW_TAG }} --json assets --jq '.assets[].name'
